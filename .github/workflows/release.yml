name: Release (auto on _version change)

on:
  push:
    branches: [ main ]        # <-- change if your default branch is different
  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write             # required for PyPI Trusted Publishing

env:
  VERSION_FILE: src/glyph_forge/_version.py

jobs:
  detect-version-change:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.check.outputs.changed }}
      version: ${{ steps.parse.outputs.version }}
      is_prerelease: ${{ steps.parse.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Did the version file change in this push?
      - id: check
        run: |
          set -e
          if git show ${{ github.sha }} --name-only --pretty="" | grep -q "^${VERSION_FILE}$"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "‚úì Version file changed in commit"
          else
            # Fallback: compare with previous commit (handles merge commits too)
            BEFORE="${{ github.event.before }}"
            if [ -n "$BEFORE" ] && git diff --name-only "$BEFORE" "${{ github.sha }}" | grep -q "^${VERSION_FILE}$"; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "‚úì Version file changed (detected via diff)"
            else
              echo "changed=false" >> $GITHUB_OUTPUT
              echo "‚úó No version file changes detected - skipping release"
            fi
          fi

      # Parse __version__ = "X.Y.Z[..]" from the file
      - id: parse
        if: steps.check.outputs.changed == 'true'
        run: |
          set -e
          VER=$(python3 <<'EOF'
          import re, pathlib
          p = pathlib.Path('${{ env.VERSION_FILE }}')
          m = re.search(r'__version__\s*=\s*["\'](.+?)["\']', p.read_text())
          if not m:
              raise SystemExit('Could not find __version__ in version file')
          print(m.group(1))
          EOF
          )
          echo "version=$VER" >> $GITHUB_OUTPUT

          # Validate version format (basic PEP 440 check)
          if ! echo "$VER" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+'; then
            echo "‚ö†Ô∏è  Warning: Version '$VER' doesn't follow semantic versioning (X.Y.Z)"
          fi

          # treat anything with a pre/dev marker as a pre-release
          if echo "$VER" | grep -Eq '(a|b|rc|dev)'; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "üì¶ Version $VER ‚Üí Pre-release (TestPyPI only)"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "üì¶ Version $VER ‚Üí Stable release (TestPyPI + PyPI)"
          fi

  build:
    needs: detect-version-change
    if: needs.detect-version-change.outputs.changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      dist-path: dist
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.SUBMODULES_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build wheel and sdist
        run: |
          echo "üì¶ Building version ${{ needs.detect-version-change.outputs.version }}..."
          python -m pip install --upgrade pip build
          rm -rf dist build *.egg-info
          python -m build
          echo "‚úì Build complete"
          echo ""
          echo "üìã Built artifacts:"
          ls -lh dist/
          echo ""
          echo "üîç Validating package..."
          python -m pip install --upgrade twine
          python -m twine check dist/*
          echo "‚úì Package validation passed"

      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  publish-testpypi:
    needs: [detect-version-change, build]
    if: needs.detect-version-change.outputs.changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.12.3
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          print-hash: true

      - name: TestPyPI installation check
        run: |
          echo "‚úì Published to TestPyPI"
          echo "Install command:"
          echo "  pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ glyph-forge==${{ needs.detect-version-change.outputs.version }}"

  publish-pypi:
    # Only publish to real PyPI if it's not a pre-release
    needs: [detect-version-change, build]
    if: needs.detect-version-change.outputs.changed == 'true' && needs.detect-version-change.outputs.is_prerelease == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Publish to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@v1.12.3
        with:
          print-hash: true

      - name: PyPI installation check
        run: |
          echo "‚úì Published to PyPI"
          echo "Users can now install:"
          echo "  pip install glyph-forge==${{ needs.detect-version-change.outputs.version }}"
          echo "  pip install glyph-forge  # (gets latest stable)"
